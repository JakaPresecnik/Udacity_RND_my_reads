{"version":3,"sources":["components/SelectShelf.js","components/bookShelfs/MyBooks.js","components/BookShelfs.js","components/bookLibrary/LibraryBooks.js","components/bookLibrary/NoBooksFound.js","components/BookLibrary.js","BooksAPI.js","App.js","index.js"],"names":["SelectShelf","props","className","value","book","shelf","onChange","e","updateShelfs","label","MyBooks","Component","render","this","books","filter","id","map","key","style","width","height","backgroundImage","imageLinks","thumbnail","title","authors","author","BookShelfs","shelfs","text","to","LibraryBooks","subtitle","Array","isArray","NoBooksFound","BookLibrary","query","updateQuery","type","placeholder","api","token","localStorage","Math","random","toString","substr","headers","update","fetch","method","body","JSON","stringify","then","res","json","BooksApp","React","state","allBooks","setState","target","split","join","BooksAPI","index","indexOf","copyBooks","Object","assign","splice","addToBooks","includes","push","componentDidMount","data","componentDidUpdate","prevProps","prevState","myBook","exact","path","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.d6b487c2.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst SelectShelf = (props) => {\r\n    return (\r\n      <div className=\"book-shelf-changer\">\r\n        <select value={props.book.shelf || \"none\"} onChange={(e) => (props.updateShelfs(e, props.book))}>\r\n          <optgroup label=\"Move to...\">\r\n            <option value=\"currentlyReading\">Currently Reading</option>\r\n            <option value=\"wantToRead\">Want to Read</option>\r\n            <option value=\"read\">Read</option>\r\n            <option value=\"none\">None</option>\r\n          </optgroup>\r\n        </select>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default SelectShelf\r\n","import React, { Component } from 'react'\r\nimport SelectShelf from '../SelectShelf'\r\n\r\nclass MyBooks extends Component {\r\n\r\n  render() {\r\n    const { shelf, updateShelfs, books } = this.props\r\n\r\n    return (\r\n      <ol className=\"books-grid\">\r\n      {books\r\n        .filter((book) => (book.shelf === shelf.id))\r\n        .map((book) => (\r\n          <li key={book.id}>\r\n            <div className=\"book\">\r\n              <div className=\"book-top\">\r\n                <div className=\"book-cover\" style={{ width: 128, height: 193, backgroundImage: `url(${book.imageLinks.thumbnail})` }}></div>\r\n                <SelectShelf updateShelfs={updateShelfs} shelf={shelf} book={book}/>\r\n              </div>\r\n              <div className=\"book-title\"><h4>{book.title}</h4></div>\r\n              <div className=\"book-authors\">{book.authors.map((author) => <p key={author}>{author}</p>)}</div>\r\n            </div>\r\n          </li>\r\n        )\r\n      )}\r\n      </ol>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MyBooks\r\n","import React from 'react'\r\nimport MyBooks from './bookShelfs/MyBooks'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst BookShelfs = (props) => {\r\n  return (\r\n    <div className=\"list-books\">\r\n      <div className=\"list-books-title\">\r\n        <h1>MyReads</h1>\r\n      </div>\r\n      <div className=\"list-books-content\">\r\n        <div>\r\n          {props.shelfs.map((shelf) => (\r\n            <div className=\"bookshelf\" key={shelf.id}>\r\n              <h2 className=\"bookshelf-title\">{shelf.text}</h2>\r\n              <div className=\"bookshelf-books\">\r\n                <MyBooks updateShelfs={props.updateShelfs} shelf={shelf} books={props.books}/>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n      <div className=\"open-search\">\r\n        <Link className=\"button\" to=\"/my-reads/search\">Search Books</Link>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default BookShelfs\r\n","import React, { Component } from 'react'\r\nimport SelectShelf from '../SelectShelf'\r\n\r\nclass LibraryBooks extends Component {\r\n  render() {\r\n    return (\r\n      <ol className=\"books-grid\">\r\n      {this.props.books\r\n        .map((book) => (\r\n          <li key={book.id}>\r\n            <div className=\"book\">\r\n              <div className=\"book-top\">\r\n                {book.imageLinks != null && (\r\n                  <div className=\"book-cover\" style={{ width: 128, height: 193, backgroundImage: `url(${book.imageLinks.thumbnail})` }}></div>\r\n                )}\r\n                <SelectShelf\r\n                  updateShelfs={this.props.updateShelfs}\r\n                  book={book}\r\n                />\r\n              </div>\r\n              <div className=\"search-book-title\">\r\n                <h4>{book.title}</h4>\r\n                <h6>{book.subtitle}</h6>\r\n              </div>\r\n              {Array.isArray(book.authors) && book.authors != null && (\r\n                <div className=\"book-authors\">{book.authors.map((author) => <p key={author}>{author}</p>)}</div>\r\n              )}\r\n\r\n            </div>\r\n          </li>\r\n        )\r\n      )}\r\n      </ol>\r\n    )\r\n  }\r\n}\r\n\r\nexport default LibraryBooks\r\n","import React from 'react'\r\n\r\nconst NoBooksFound = () => {\r\n  return (\r\n    <div className=\"no-items\">\r\n      <p>Try something else in the search bar....</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default NoBooksFound\r\n","import React, { Component } from 'react'\r\nimport LibraryBooks from './bookLibrary/LibraryBooks'\r\nimport NoBooksFound from './bookLibrary/NoBooksFound'\r\nimport { Link } from 'react-router-dom'\r\n\r\nclass BookLibrary extends Component {\r\n  render() {\r\n    const { books, query, updateQuery } = this.props\r\n    return (\r\n      <div className=\"search-books\">\r\n        <div className=\"search-books-bar\">\r\n          <Link className=\"close-search\" to=\"/my-reads/\">Close</Link>\r\n          <div className=\"search-books-input-wrapper\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Search by title or author\"\r\n              value={query}\r\n              onChange={(e)=> updateQuery(e)}\r\n            />\r\n\r\n          </div>\r\n        </div>\r\n        <div className=\"search-books-results\">\r\n        {Array.isArray(books) ? (\r\n          <LibraryBooks\r\n            books={books}\r\n            updateShelfs={this.props.updateShelfs}\r\n          />\r\n        ) : (\r\n          <NoBooksFound />\r\n        )}\r\n\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default BookLibrary\r\n","\r\nconst api = \"https://reactnd-books-api.udacity.com\"\r\n\r\n\r\n// Generate a unique token for storing your bookshelf data on the backend server.\r\nlet token = localStorage.token\r\nif (!token)\r\n  token = localStorage.token = Math.random().toString(36).substr(-8)\r\n\r\nconst headers = {\r\n  'Accept': 'application/json',\r\n  'Authorization': token\r\n}\r\n\r\nexport const get = (bookId) =>\r\n  fetch(`${api}/books/${bookId}`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.book)\r\n\r\nexport const getAll = () =>\r\n  fetch(`${api}/books`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.books)\r\n\r\nexport const update = (book, shelf) =>\r\n  fetch(`${api}/books/${book.id}`, {\r\n    method: 'PUT',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ shelf })\r\n  }).then(res => res.json())\r\n\r\nexport const search = (query) =>\r\n  fetch(`${api}/search`, {\r\n    method: 'POST',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ query })\r\n  }).then(res => res.json())\r\n    .then(data => data.books)\r\n","import React from 'react'\r\nimport './App.css'\r\nimport BookShelfs from './components/BookShelfs'\r\nimport BookLibrary from './components/BookLibrary'\r\nimport { Route } from 'react-router-dom'\r\nimport * as BooksAPI from './BooksAPI'\r\n\r\n\r\n// I split the book array to two so the performance is faster\r\nclass BooksApp extends React.Component {\r\n  state = {\r\n    shelfs: [\r\n      {id: 'currentlyReading', text: 'Currently Reading'},\r\n      {id: 'wantToRead', text: 'Want to Read',},\r\n      {id: 'read', text: 'Read', }\r\n    ],\r\n    books: [],\r\n    allBooks: [],\r\n    query: ''\r\n  }\r\n\r\n// used to get all books stored on the server to the DOM\r\n  componentDidMount() {\r\n    BooksAPI.getAll()\r\n    .then((allBooks) => {\r\n      this.setState({\r\n        books: allBooks\r\n      })\r\n    })\r\n  }\r\n\r\n  // componentDidUpdate used here to have the API do the search in /search tab\r\n  // also giving the proper shelf if we have it in any of our shelfs\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (this.state.query !== prevState.query) {\r\n      BooksAPI.search(this.state.query)\r\n      .then((allBooks) => {\r\n        Array.isArray(allBooks) &&\r\n        this.state.books.map((myBook) =>{\r\n          allBooks.map((book) => {\r\n            if(book.id === myBook.id) {\r\n              book.shelf = myBook.shelf\r\n            }\r\n          })\r\n        })\r\n        this.setState({\r\n          allBooks: allBooks\r\n        })\r\n      })\r\n\r\n    }\r\n  }\r\n\r\n  updateQuery = (e) => {\r\n    this.setState({query: e.target.value.split(/\\s+/).join(' ')})\r\n  }\r\n\r\n// here we update the server array and our DOM. It is split due to performance (much slower if only BooksAPI used)\r\n  updateShelfs = (e, book) => {\r\n    BooksAPI.update(book, e.target.value)\r\n\r\n    const index = this.state.books.indexOf(book)\r\n\r\n    if (e.target.value === 'none') {\r\n      let copyBooks = Object.assign({}, this.state)\r\n      copyBooks.books = copyBooks.books !== copyBooks.books.splice(index, 1) && copyBooks.books\r\n\r\n      this.setState (copyBooks)\r\n    }else {\r\n      let copyBooks = Object.assign({}, this.state)\r\n      copyBooks.books[index].shelf = e.target.value\r\n\r\n      this.setState (copyBooks)\r\n    }\r\n  }\r\n\r\n\r\n//this one adds the book from the search to our DOM or change the shelf if already in our array.\r\n//it also sends the new data to server to be stored\r\n  addToBooks = (e, book) => {\r\n    const index = this.state.allBooks.indexOf(book)\r\n    let copyBooks = Object.assign({}, this.state)\r\n    copyBooks.allBooks[index].shelf = e.target.value\r\n\r\n    if(!this.state.books.includes(book)){\r\n      copyBooks.books.push(book)\r\n    }else {\r\n      const index = this.state.books.indexOf(book)\r\n      let copyBooks = Object.assign({}, this.state)\r\n      copyBooks.books[index].shelf = e.target.value\r\n    }\r\n    this.setState({copyBooks})\r\n    BooksAPI.update(book, e.target.value)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"app\">\r\n        <Route exact path= \"/my-reads/\" render={() => (\r\n            <BookShelfs\r\n              shelfs={this.state.shelfs}\r\n              books={this.state.books}\r\n              updateShelfs={this.updateShelfs}\r\n            />\r\n          )}\r\n        />\r\n        <Route exact path= \"/my-reads/search\" render={() => (\r\n            <BookLibrary\r\n              updateShelfs={this.addToBooks}\r\n              books={this.state.allBooks}\r\n              query={this.state.query}\r\n              updateQuery={this.updateQuery}\r\n            />\r\n          )}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default BooksApp\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport './index.css'\r\nimport { BrowserRouter } from 'react-router-dom'\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>, document.getElementById('root'))\r\n"],"sourceRoot":""}